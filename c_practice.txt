调用函数Fun(2)
int Fun(int n)
{
	if (n == 5)
		return 2;
	else
		return 2 * Fun(n + 1);
}
int main()
{
	printf("%d ", Fun(2));
	return 0;
}


例
字符串逆序（递归实现）  -编写一个函数 reverse_string(char*string)(递归实现）
实现：将参数字符串中的字符反向排列，不是逆序打印
要求：不能使用c函数库的字符串操作函数；
如 - char arr[]  = "abcdef" - 逆序 - ：“febcba”


循环实现：
int my_strlen(char* str)
{
	int count = 0;
	while (*str != '\0')
	{
		count++;
		str++;
	}
	return count;
}
void reverse_string(char* str)
{
	int left = 0;
	int right = my_strlen(str) - 1;

	while (left < right)
	{
		//char tmp = str[left];
		//str[left] = str[right];
		//str[right] = tmp;
		
		//str[left] 等同于  *(str + left)
		char tmp = *(str + left);
		*(str + left) = *(str + right);
		*(str + right) = tmp;

		left++;
		right--;
	}
}
int main()
{
	char arr[] = "abcdef";
	reverse_string(arr);//数组名arr是数组arr首元素的地址
	printf("%s\n", arr);//fecdba
	return 0;
}


递归实现
int my_strlen(char* str)
{
	int count = 0;
	while (*str != '\0')
	{
		count++;
		str++;
	}
	return count;
}
void reverse_string(char* str)
{
	char tmp = *str;//1
	int len = my_strlen(str);
	*str = *(str + len - 1);//2
	*(str + len - 1) = '\0';//3
	//判断条件
	if (my_strlen(str + 1) >= 2)
	{
		reverse_string(str + 1);//4
	}
	*(str + len - 1) = tmp;//5
}
int main()
{
	char arr[] = "abcdef";
	reverse_string(arr);

	printf("%s\n", arr);
	return 0;
}


例
计算一个数的每位之和（递归实现）
写一个递归函数FigitSum(n),输入一个非负整数，返回组成它的数字之和，如：1234 = 1+2+3+4  =  10

int DigitSum(int n)
{
	if (n > 9)
	{
		return DigitSum(n / 10) + n % 10;
	}
	else
	{
		return n;
	}
}
int main()
{
	int num = 1729;
	int sum = DigitSum(num);
	printf("%d\n", sum);
	return 0;
}



编写一个函数来实现n的k次方，使用递归实现：

double Pow(int n, int k)
{
	if (k == 0)
		return 1.0;
	else if (k > 0)
		return n * Pow(n, k - 1);
	else
		return 1.0 / (Pow(n, -k));
}
int main()
{
	int n = 0;
	int k = 0;
	scanf("%d %d", &n, &k);
	double ret = Pow(n, k);
	printf("%lf\n", ret);

	return 0;
}
