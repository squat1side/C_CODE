//例
//编写函数，不允许创建临时变量，求字符串的长度

//int my_strlen(char* str)
//{
//	int count = 0;
//	while (*str != '\0')
//	{
//		count++;
//		str++;
//	}
//	return count;
//}


//如何不使用临时变量count - 使用递归解决
// str + 1 = 下一个字符的地址
// 
// my_strlen("ue");
// 1 + my_strlen("e");
// 1 + 1 + strlen(" ");
// 1 + 1 + 0 = 2;

//int my_strlen(char* str)
//{
//	if (*str != '\0')
//	    return 1 + my_strlen(str + 1);
//	else
//	    return 0;
//}
//
//int main()
//{
//	char arr[] = "ue";
//	//['u'] ['e'] ['\0']
//	
//	//模拟实现一个strlen函数
//	printf("%d\n", my_strlen(arr));
//
//	return 0;
//}

//求n的阶乘（不考虑溢出）

//int main()
//{
//	int n = 0;
//	scanf("%d", &n);
//	int i = 0;
//	int ret = 1;
//	for (i = 1; i <= n; i++)
//	{
//		ret = ret * i;
//	}
//	printf("%d\n", ret);
//	return 0;
//}


//使用递归的方法
//int Fac(int n)
//{
//	if (n <= 1)
//		return 1;
//	else
//		return n * Fac(n - 1);
//}
//int main()
//{
//	int n = 0;
//	scanf("%d", &n);
//	int ret = Fac(n);
//	printf("%d\n", ret);
//	return 0;
//}


//求第n个斐波那契数（不考虑溢出） 1 1 2 3 5 8 13 21 34 ... ..前两数和等于第三数
//Fib(n)     n<=2,   1
//           n>2,    Fib(n-1) + Fib(n-2)

//int Fib(int n)
//{
//	if (n <= 2)
//		return 1;
//	else
//		return Fib(n - 1) + Fib(n - 2);
//}
//int main()
//{
//	int n = 0;
//	scanf("%d", &n);
//	int ret = Fib(n);
//	printf("%d\n", ret);
//
//	return 0;
//}

//当斐波那契数的数值过高，此代码运行效率过低，重复大量计算，计算机则会一直跑（用时很长）
//int count = 0;//定义一个全局变量
////递归可以求解，但是效率太低
//int Fib(int n)
//{
//	//计算第三个Fib的计算次数
//	if (n == 3)
//		count++;
//
//	if (n <= 2)
//		return 1;
//	else
//		return Fib(n - 1) + Fib(n - 2);
//}
//int main()
//{
//	int n = 0;
//	scanf("%d", &n);
//	int ret = Fib(n);
//
//	printf("%d\n", ret);
//	printf("count = %d\n", count);
//	return 0;
//}


//函数是可以用递归和迭代的方法，在递归有公式的情况非常简单写出，但是有问题是会遇到效率低下的情况；（递归层次太深，栈溢出）
//而此时迭代的代码虽麻烦但是效率高；

//使用循环的方法（迭代），从头开始加
//     1     1     2     3     5     8     13     21     34     55     ... ...
//     a     b    c=a+b
//          a=b   b=c   c=a+b
//  ...
//...

int Fib(int n)
{
	int a = 1;
	int b = 1;
	int c = 1;

	while (n > 2)
	{
		c = a + b;
		a = b;
		b = c;
		n--;
	}
	return c;
}
int main()
{
	int n = 0;
	scanf("%d", &n);
	int ret = Fib(n);

	printf("%d\n", ret);

	return 0;
}

